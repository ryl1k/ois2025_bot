require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const path = require('path');
const Groq = require('groq-sdk');
const axios = require('axios');
const cheerio = require('cheerio');

const token = process.env.BOT_TOKEN;
const bot = new TelegramBot(token, {polling: true});

const ADMIN_ID = process.env.ADMIN_ID;
const TARGET_CHAT = process.env.TARGET_CHAT;

const groq = new Groq(process.env.GROQ_API_KEY);

const conversationHistory = new Map();
const chatMemory = new Map();

const MEMORY_CONFIG = {
  MAX_HISTORY_TOKENS: 32000,
  COMPACT_TO_TOKENS: 16000,
  COMPACT_THRESHOLD: 0.8,
  CHAT_MEMORY_LIMIT: 100
};

function readMessageFile(fileName) {
  try {
    const filePath = path.join(__dirname, 'messages', fileName);
    return fs.readFileSync(filePath, 'utf8');
  } catch (error) {
    console.error(`–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É ${fileName}:`, error);
    return '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è';
  }
}

function readSystemPrompt() {
  try {
    const filePath = path.join(__dirname, 'system_prompt.txt');
    return fs.readFileSync(filePath, 'utf8');
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç—É:', error);
    return '–¢–∏ –∫–æ—Ä–∏—Å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫-–±–æ—Ç –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –û–Ü–° 2025.';
  }
}

function getConversationKey(chatId, userId) {
  return `${chatId}_${userId}`;
}

function estimateTokens(text) {
  return Math.ceil(text.length / 3.5);
}

function calculateHistoryTokens(history) {
  return history.reduce((total, msg) => {
    return total + estimateTokens(msg.content);
  }, 0);
}

async function compactHistory(history) {
  if (history.length <= 3) return history;
  
  const systemMessage = history[0]?.role === 'system' ? history[0] : null;
  const recentMessages = history.slice(-3);
  const middleMessages = history.slice(systemMessage ? 1 : 0, -3);
  
  if (middleMessages.length === 0) return history;
  
  try {
    const conversationSummary = middleMessages.map(msg => 
      `${msg.role}: ${msg.content.substring(0, 200)}...`
    ).join('\n');
    
    const summaryPrompt = `–ó—Å—É–º—É–π —Ü—é —á–∞—Å—Ç–∏–Ω—É —Ä–æ–∑–º–æ–≤–∏ –≤ 2-3 —Ä–µ—á–µ–Ω–Ω—è—Ö, –∑–±–µ—Ä—ñ–≥—à–∏ –∫–ª—é—á–æ–≤—ñ –º–æ–º–µ–Ω—Ç–∏:\n${conversationSummary}`;
    
    const chatCompletion = await groq.chat.completions.create({
      messages: [
        { role: 'system', content: '–¢–∏ –ø–æ–º—ñ—á–Ω–∏–∫, —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î –∫–æ—Ä–æ—Ç–∫—ñ —Ç–∞ —Ç–æ—á–Ω—ñ —Å–∞–º–º–∞—Ä—ñ —Ä–æ–∑–º–æ–≤.' },
        { role: 'user', content: summaryPrompt }
      ],
      model: 'llama-3.3-70b-versatile',
      temperature: 0.3,
      max_tokens: 200
    });
    
    const summary = chatCompletion.choices[0]?.message?.content || '–ü–æ–ø–µ—Ä–µ–¥–Ω—è —á–∞—Å—Ç–∏–Ω–∞ —Ä–æ–∑–º–æ–≤–∏.';
    
    const compactedHistory = [];
    if (systemMessage) compactedHistory.push(systemMessage);
    
    compactedHistory.push({
      role: 'assistant',
      content: `[–°–∞–º–º–∞—Ä—ñ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó —Ä–æ–∑–º–æ–≤–∏: ${summary}]`,
      timestamp: Date.now(),
      isCompacted: true
    });
    
    compactedHistory.push(...recentMessages);
    
    console.log(`–Ü—Å—Ç–æ—Ä—ñ—è —Å–∫–æ–º–ø–∞–∫—Ç–æ–≤–∞–Ω–∞: ${history.length} ‚Üí ${compactedHistory.length} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å`);
    return compactedHistory;
    
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –∫–æ–º–ø–∞–∫—Ç—É–≤–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó:', error);
    return history.slice(-10);
  }
}

async function addToHistory(chatId, userId, role, content) {
  const key = getConversationKey(chatId, userId);
  if (!conversationHistory.has(key)) {
    conversationHistory.set(key, []);
  }
  
  let history = conversationHistory.get(key);
  history.push({ role, content, timestamp: Date.now() });
  
  const totalTokens = calculateHistoryTokens(history);
  
  if (totalTokens > MEMORY_CONFIG.MAX_HISTORY_TOKENS * MEMORY_CONFIG.COMPACT_THRESHOLD) {
    console.log(`–ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç —Ç–æ–∫–µ–Ω—ñ–≤ (${totalTokens}/${MEMORY_CONFIG.MAX_HISTORY_TOKENS}), –∫–æ–º–ø–∞–∫—Ç—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é...`);
    history = await compactHistory(history);
  }
  
  if (history.length > 25) {
    history.splice(0, history.length - 25);
  }
  
  conversationHistory.set(key, history);
}

function getHistory(chatId, userId) {
  const key = getConversationKey(chatId, userId);
  return conversationHistory.get(key) || [];
}

function clearUserMemory(chatId, userId) {
  const key = getConversationKey(chatId, userId);
  const hadMemory = conversationHistory.has(key);
  conversationHistory.delete(key);
  console.log(`–ü–∞–º'—è—Ç—å –æ—á–∏—â–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${userId} –≤ —á–∞—Ç—ñ ${chatId} (–∫–ª—é—á: ${key}). –ë—É–ª–∞ —ñ—Å—Ç–æ—Ä—ñ—è: ${hadMemory}`);
  return true;
}

async function addToChatMemory(chatId, content, author = 'unknown') {
  if (!chatMemory.has(chatId)) {
    chatMemory.set(chatId, []);
  }
  
  const memory = chatMemory.get(chatId);
  memory.push({
    content: content.substring(0, 200),
    author,
    timestamp: Date.now()
  });
  
  if (memory.length > MEMORY_CONFIG.CHAT_MEMORY_LIMIT) {
    memory.splice(0, memory.length - MEMORY_CONFIG.CHAT_MEMORY_LIMIT);
  }
  
  chatMemory.set(chatId, memory);
}

function getChatMemoryContext(chatId) {
  const memory = chatMemory.get(chatId) || [];
  if (memory.length === 0) return '';
  
  const recentMemory = memory.slice(-20).map(m => 
    `[${m.author}]: ${m.content}`
  ).join('\n');
  
  return `\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç—É:\n${recentMemory}`;
}

function formatMessageForTelegram(text) {
  if (!text) return text;
  
  try {
    // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î —Ç–∞–±–ª–∏—Ü—ñ —ñ –æ–±—Ä–æ–±–ª—è—î–º–æ —ó—Ö
    let formatted = formatTablesForTelegram(text);
    
    // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏ –≤–∏–¥—ñ–ª–µ–Ω–Ω—è –≤ Telegram Markdown
    formatted = formatted
      // HTML —Ç–µ–≥–∏
      .replace(/<br\s*\/?>/gi, '\n')
      .replace(/<\/br>/gi, '\n')
      .replace(/<p>/gi, '\n')
      .replace(/<\/p>/gi, '\n')
      .replace(/<strong>(.*?)<\/strong>/gi, '*$1*')
      .replace(/<b>(.*?)<\/b>/gi, '*$1*')
      .replace(/<em>(.*?)<\/em>/gi, '_$1_')
      .replace(/<i>(.*?)<\/i>/gi, '_$1_')
      .replace(/<code>(.*?)<\/code>/gi, '`$1`')
      .replace(/<pre>(.*?)<\/pre>/gis, '```$1```')
      .replace(/<u>(.*?)<\/u>/gi, '$1')
      .replace(/<s>(.*?)<\/s>/gi, '~$1~')
      .replace(/<strike>(.*?)<\/strike>/gi, '~$1~')
      .replace(/<del>(.*?)<\/del>/gi, '~$1~')
      .replace(/<h[1-6]>(.*?)<\/h[1-6]>/gi, '*$1*')
      .replace(/<ul>/gi, '')
      .replace(/<\/ul>/gi, '')
      .replace(/<ol>/gi, '')
      .replace(/<\/ol>/gi, '')
      .replace(/<li>(.*?)<\/li>/gi, '‚Ä¢ $1\n')
      .replace(/<a\s+href="([^"]*)"[^>]*>(.*?)<\/a>/gi, '[$2]($1)')
      .replace(/<img[^>]*alt="([^"]*)"[^>]*>/gi, 'üñºÔ∏è $1')
      .replace(/<hr\s*\/?>/gi, '‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ')
      .replace(/<div[^>]*>/gi, '\n')
      .replace(/<\/div>/gi, '\n')
      .replace(/<span[^>]*>/gi, '')
      .replace(/<\/span>/gi, '')
      // –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–ª–∏—à–∫–æ–≤—ñ HTML —Ç–µ–≥–∏
      .replace(/<[^>]*>/g, '')
      // Markdown —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
      .replace(/\*\*(.*?)\*\*/g, '*$1*')
      .replace(/_(.*?)_/g, '_$1_')
      .replace(/`(.*?)`/g, '`$1`')
      .replace(/```([\s\S]*?)```/g, '```$1```')
      // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –∂–∏—Ä–Ω–∏–π —Ç–µ–∫—Å—Ç
      .replace(/^#{1,6}\s+(.*?)$/gm, '*$1*')
      // –°–ø–∏—Å–∫–∏ –∑ –µ–º–æ–¥–∑—ñ –¥–ª—è –∫—Ä–∞—â–æ—ó —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ
      .replace(/^\s*[-*+]\s+/gm, '‚Ä¢ ')
      // –û—á–∏—â–∞—î–º–æ –∑–∞–π–≤—ñ –ø–µ—Ä–µ–Ω–æ—Å–∏ —Ä—è–¥–∫—ñ–≤
      .replace(/\n{3,}/g, '\n\n')
      .replace(/^\s+|\s+$/g, '');
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ –≤–∏–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ Markdown —Å–∏–º–≤–æ–ª–∏
    formatted = fixMarkdownEntities(formatted);
    
    return formatted;
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', error);
    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—Ä–æ—Å—Ç–∏–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –≤ —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏
    return text.replace(/<[^>]*>/g, '').replace(/[*_`]/g, '');
  }
}

function fixMarkdownEntities(text) {
  if (!text) return text;
  
  try {
    let fixed = text;
    
    // –í–∏–¥–∞–ª—è—î–º–æ –ø—É—Å—Ç—ñ Markdown —Ç–µ–≥–∏
    fixed = fixed.replace(/\*\*/g, '').replace(/\*\s*\*/g, '');
    fixed = fixed.replace(/_{2,}/g, '').replace(/_\s*_/g, '');
    fixed = fixed.replace(/`{3,}/g, '```').replace(/`\s*`/g, '');
    fixed = fixed.replace(/~{2,}/g, '~').replace(/~\s*~/g, '');
    
    // –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–µ–ø–∞—Ä–Ω—ñ —Å–∏–º–≤–æ–ª–∏ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
    const boldCount = (fixed.match(/\*/g) || []).length;
    const italicCount = (fixed.match(/_/g) || []).length;
    const codeCount = (fixed.match(/`/g) || []).length;
    const strikeCount = (fixed.match(/~/g) || []).length;
    
    // –í–∏–¥–∞–ª—è—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Å–∏–º–≤–æ–ª —è–∫—â–æ –≤—ñ–Ω –Ω–µ–ø–∞—Ä–Ω–∏–π
    if (boldCount % 2 !== 0) {
      const lastBold = fixed.lastIndexOf('*');
      if (lastBold !== -1) {
        fixed = fixed.substring(0, lastBold) + fixed.substring(lastBold + 1);
      }
    }
    
    if (italicCount % 2 !== 0) {
      const lastItalic = fixed.lastIndexOf('_');
      if (lastItalic !== -1) {
        fixed = fixed.substring(0, lastItalic) + fixed.substring(lastItalic + 1);
      }
    }
    
    if (codeCount % 2 !== 0 && !fixed.includes('```')) {
      const lastCode = fixed.lastIndexOf('`');
      if (lastCode !== -1) {
        fixed = fixed.substring(0, lastCode) + fixed.substring(lastCode + 1);
      }
    }
    
    if (strikeCount % 2 !== 0) {
      const lastStrike = fixed.lastIndexOf('~');
      if (lastStrike !== -1) {
        fixed = fixed.substring(0, lastStrike) + fixed.substring(lastStrike + 1);
      }
    }
    
    // –ï–∫—Ä–∞–Ω—É—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏ –≤ URL
    fixed = fixed.replace(/\[([^\]]*)\]\(([^)]*)\)/g, (match, text, url) => {
      const cleanUrl = url.replace(/[*_`~]/g, '');
      const cleanText = text.replace(/[*_`~]/g, '');
      return `[${cleanText}](${cleanUrl})`;
    });
    
    return fixed;
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è Markdown:', error);
    return text.replace(/[*_`~]/g, '');
  }
}

function formatTablesForTelegram(text) {
  // –ü–æ—à—É–∫ Markdown —Ç–∞–±–ª–∏—Ü—å (–∑ |)
  const markdownTableRegex = /(\|[^\n]*\|[\s]*\n)+/g;
  
  // –ü–æ—à—É–∫ –¥–∞–Ω–∏—Ö —Å—Ö–æ–∂–∏—Ö –Ω–∞ —Ç–∞–±–ª–∏—Ü—ñ (–∫—ñ–ª—å–∫–∞ —Ä—è–¥–∫—ñ–≤ –∑ —Ä–æ–∑–¥—ñ–ª—é–≤–∞—á–∞–º–∏ | –∞–±–æ —Ä—è–¥–∫–∏ –∑ –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–Ω—è)
  const tableDataRegex = /(?:\|[^\n]*\|[\s]*\n){2,}|(?:^[^|\n]*\|[^|\n]*$[\s]*\n){2,}/gm;
  
  // –ü–æ—à—É–∫ —Å–ø–∏—Å–∫—ñ–≤ –∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏ (–∫–ª—é—á: –∑–Ω–∞—á–µ–Ω–Ω—è)
  const structuredDataRegex = /(?:^[‚Ä¢\-\*]\s*[^:\n]+:\s*[^\n]+$[\s]*\n){3,}/gm;
  
  let formatted = text;
  
  // –û–±—Ä–æ–±–ª—è—î–º–æ Markdown —Ç–∞–±–ª–∏—Ü—ñ
  formatted = formatted.replace(markdownTableRegex, (match) => {
    return '```\n' + match.trim() + '\n```\n';
  });
  
  // –û–±—Ä–æ–±–ª—è—î–º–æ –¥–∞–Ω—ñ —Å—Ö–æ–∂—ñ –Ω–∞ —Ç–∞–±–ª–∏—Ü—ñ
  formatted = formatted.replace(tableDataRegex, (match) => {
    if (!match.includes('```')) { // —è–∫—â–æ –Ω–µ –≤–∂–µ –≤ –∫–æ–¥—ñ
      return '```\n' + match.trim() + '\n```\n';
    }
    return match;
  });
  
  // –û–±—Ä–æ–±–ª—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω—ñ —Å–ø–∏—Å–∫–∏ (—è–∫—â–æ —î –±–∞–≥–∞—Ç–æ –∫–ª—é—á:–∑–Ω–∞—á–µ–Ω–Ω—è)
  formatted = formatted.replace(structuredDataRegex, (match) => {
    if (!match.includes('```')) { // —è–∫—â–æ –Ω–µ –≤–∂–µ –≤ –∫–æ–¥—ñ
      return '```\n' + match.trim() + '\n```\n';
    }
    return match;
  });
  
  return formatted;
}

async function searchWeb(query) {
  try {
    const searchUrl = `https://duckduckgo.com/html/?q=${encodeURIComponent(query)}`;
    const response = await axios.get(searchUrl, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
      },
      timeout: 10000
    });
    
    const $ = cheerio.load(response.data);
    const results = [];
    
    $('.result').each((i, elem) => {
      if (i < 3) {
        const title = $(elem).find('.result__title a').text().trim();
        const snippet = $(elem).find('.result__snippet').text().trim();
        const url = $(elem).find('.result__title a').attr('href');
        
        if (title && snippet) {
          results.push({
            title,
            snippet,
            url
          });
        }
      }
    });
    
    return results;
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –≤–µ–±-–ø–æ—à—É–∫—É:', error);
    return [];
  }
}

async function getRepoInfo(repo) {
  try {
    const repoUrl = `https://api.github.com/repos/${repo}`;
    const response = await axios.get(repoUrl, {
      timeout: 10000,
      headers: {
        'Accept': 'application/vnd.github.v3+json',
        'User-Agent': 'OIS2025-Bot'
      }
    });
    
    return {
      name: response.data.name,
      description: response.data.description,
      language: response.data.language,
      stars: response.data.stargazers_count,
      forks: response.data.forks_count,
      size: response.data.size,
      topics: response.data.topics || [],
      license: response.data.license?.name,
      created_at: response.data.created_at,
      updated_at: response.data.updated_at
    };
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π:', error);
    return null;
  }
}

async function analyzeRepoStructure(repo) {
  try {
    const rootContents = await fetchFromGitHub(repo);
    if (!rootContents || rootContents.type !== 'directory') return null;
    
    const importantFiles = ['README.md', 'README.txt', 'package.json', 'requirements.txt', 'Cargo.toml', 'pom.xml', 'go.mod', 'setup.py'];
    const configFiles = ['.gitignore', 'Dockerfile', 'docker-compose.yml', '.github'];
    
    const structure = {
      files: rootContents.files,
      hasReadme: false,
      readmeContent: '',
      packageInfo: null,
      hasTests: false,
      hasDocs: false,
      hasCI: false,
      mainLanguage: null
    };
    
    for (const file of rootContents.files) {
      if (file.name.toLowerCase().includes('readme')) {
        structure.hasReadme = true;
        const readmeData = await fetchFromGitHub(repo, file.name);
        if (readmeData && readmeData.type === 'file') {
          structure.readmeContent = readmeData.content;
        }
      }
      
      if (file.name === 'package.json') {
        const packageData = await fetchFromGitHub(repo, file.name);
        if (packageData && packageData.type === 'file') {
          try {
            structure.packageInfo = JSON.parse(packageData.content);
          } catch (e) {}
        }
      }
      
      if (file.name.toLowerCase().includes('test') || file.name === '__tests__') {
        structure.hasTests = true;
      }
      
      if (file.name.toLowerCase().includes('doc') || file.name === 'docs') {
        structure.hasDocs = true;
      }
      
      if (file.name === '.github') {
        structure.hasCI = true;
      }
    }
    
    return structure;
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—è:', error);
    return null;
  }
}

async function fetchFromGitHub(repo, path = '') {
  try {
    const apiUrl = `https://api.github.com/repos/${repo}/contents/${path}`;
    const response = await axios.get(apiUrl, {
      timeout: 10000,
      headers: {
        'Accept': 'application/vnd.github.v3+json',
        'User-Agent': 'OIS2025-Bot'
      }
    });
    
    if (response.data.type === 'file') {
      const content = Buffer.from(response.data.content, 'base64').toString('utf-8');
      return {
        type: 'file',
        name: response.data.name,
        content: content.length > 2000 ? content.substring(0, 2000) + '...' : content
      };
    } else if (response.data.length) {
      return {
        type: 'directory',
        files: response.data.map(item => ({
          name: item.name,
          type: item.type,
          size: item.size
        })).slice(0, 10)
      };
    }
    
    return null;
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ GitHub API:', error);
    return null;
  }
}

function formatRepoAnalysis(repoInfo, structure) {
  let analysis = '';
  
  if (repoInfo) {
    analysis += `üì¶ **${repoInfo.name}**\n`;
    if (repoInfo.description) analysis += `üìù ${repoInfo.description}\n`;
    analysis += `üåü ${repoInfo.stars} –∑—ñ—Ä–æ–∫ | üç¥ ${repoInfo.forks} —Ñ–æ—Ä–∫—ñ–≤\n`;
    if (repoInfo.language) analysis += `üíª –û—Å–Ω–æ–≤–Ω–∞ –º–æ–≤–∞: ${repoInfo.language}\n`;
    if (repoInfo.license) analysis += `üìú –õ—ñ—Ü–µ–Ω–∑—ñ—è: ${repoInfo.license}\n`;
    if (repoInfo.topics && repoInfo.topics.length > 0) {
      analysis += `üè∑Ô∏è –¢–µ–≥–∏: ${repoInfo.topics.join(', ')}\n`;
    }
    analysis += '\n';
  }
  
  if (structure) {
    analysis += 'üìÅ **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç—É:**\n';
    
    if (structure.hasReadme) {
      analysis += '‚úÖ README –ø—Ä–∏—Å—É—Ç–Ω—ñ–π\n';
    } else {
      analysis += '‚ùå README –≤—ñ–¥—Å—É—Ç–Ω—ñ–π\n';
    }
    
    if (structure.packageInfo) {
      analysis += `‚úÖ package.json: ${structure.packageInfo.name}\n`;
      if (structure.packageInfo.scripts) {
        const scripts = Object.keys(structure.packageInfo.scripts).slice(0, 3);
        analysis += `üîß –°–∫—Ä–∏–ø—Ç–∏: ${scripts.join(', ')}\n`;
      }
    }
    
    analysis += `${structure.hasTests ? '‚úÖ' : '‚ùå'} –¢–µ—Å—Ç–∏\n`;
    analysis += `${structure.hasDocs ? '‚úÖ' : '‚ùå'} –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è\n`;
    analysis += `${structure.hasCI ? '‚úÖ' : '‚ùå'} CI/CD\n\n`;
    
    if (structure.readmeContent) {
      analysis += 'üìñ **–û–ø–∏—Å –∑ README:**\n';
      const summary = structure.readmeContent.substring(0, 500);
      analysis += summary + (structure.readmeContent.length > 500 ? '...' : '') + '\n\n';
    }
    
    analysis += 'üìã **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:**\n';
    const recommendations = [];
    
    if (!structure.hasReadme) recommendations.push('‚Ä¢ –î–æ–¥–∞—Ç–∏ README.md –∑ –æ–ø–∏—Å–æ–º –ø—Ä–æ–µ–∫—Ç—É');
    if (!structure.hasTests) recommendations.push('‚Ä¢ –î–æ–¥–∞—Ç–∏ —Ç–µ—Å—Ç–∏ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —è–∫–æ—Å—Ç—ñ –∫–æ–¥—É');
    if (!structure.hasDocs) recommendations.push('‚Ä¢ –°—Ç–≤–æ—Ä–∏—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é');
    if (!structure.hasCI) recommendations.push('‚Ä¢ –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ GitHub Actions –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó');
    
    if (recommendations.length === 0) {
      recommendations.push('‚Ä¢ –ü—Ä–æ–µ–∫—Ç –º–∞—î –≥–∞—Ä–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É! –ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –≤ —Ç–æ–º—É –∂ –¥—É—Å—ñ');
    }
    
    analysis += recommendations.join('\n');
  }
  
  return analysis;
}

async function fetchWebPage(url) {
  try {
    const response = await axios.get(url, {
      timeout: 10000,
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
      }
    });
    
    const $ = cheerio.load(response.data);
    
    $('script, style, nav, footer, aside').remove();
    
    const title = $('title').text().trim() || '–ë–µ–∑ –Ω–∞–∑–≤–∏';
    const content = $('body').text()
      .replace(/\s+/g, ' ')
      .trim()
      .substring(0, 1500);
    
    return {
      title,
      content,
      url
    };
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏:', error);
    return null;
  }
}

async function getGroqResponse(userMessage, chatId, userId) {
  try {
    let additionalContext = '';
    
    const githubRegex = /github\.com\/([^\/]+\/[^\/\s]+)(?:\/blob\/[^\/]+)?(?:\/(.+))?/;
    const urlRegex = /(https?:\/\/[^\s]+)/g;
    const searchRegex = /(?:–ø–æ—à—É–∫–∞–π|–∑–Ω–∞–π–¥–∏|search|–Ω–∞–π–¥–∏|—à—É–∫–∞–π)\s+(.+)/i;
    
    if (githubRegex.test(userMessage)) {
      const match = userMessage.match(githubRegex);
      const repo = match[1];
      const path = match[2] || '';
      
      if (path) {
        const githubData = await fetchFromGitHub(repo, path);
        if (githubData) {
          if (githubData.type === 'file') {
            additionalContext = `\n\n–í–º—ñ—Å—Ç —Ñ–∞–π–ª—É ${githubData.name} –∑ GitHub:\n${githubData.content}`;
          } else if (githubData.type === 'directory') {
            additionalContext = `\n\n–í–º—ñ—Å—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –∑ GitHub:\n${githubData.files.map(f => `- ${f.name} (${f.type})`).join('\n')}`;
          }
        }
      } else {
        const [repoInfo, structure] = await Promise.all([
          getRepoInfo(repo),
          analyzeRepoStructure(repo)
        ]);
        
        if (repoInfo || structure) {
          const analysis = formatRepoAnalysis(repoInfo, structure);
          additionalContext = `\n\n–ê–Ω–∞–ª—ñ–∑ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—è:\n${analysis}`;
        }
      }
    }
    
    else if (urlRegex.test(userMessage)) {
      const urls = userMessage.match(urlRegex);
      if (urls && urls.length > 0) {
        const pageData = await fetchWebPage(urls[0]);
        if (pageData) {
          additionalContext = `\n\n–í–º—ñ—Å—Ç –≤–µ–±-—Å—Ç–æ—Ä—ñ–Ω–∫–∏ "${pageData.title}":\n${pageData.content}`;
        }
      }
    }
    
    else if (searchRegex.test(userMessage)) {
      const searchMatch = userMessage.match(searchRegex);
      if (searchMatch && searchMatch[1]) {
        const searchResults = await searchWeb(searchMatch[1]);
        if (searchResults.length > 0) {
          additionalContext = '\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É:\n' + 
            searchResults.map((result, i) => 
              `${i + 1}. ${result.title}\n${result.snippet}\n${result.url}\n`
            ).join('\n');
        }
      }
    }
    
    const systemPrompt = readSystemPrompt();
    const history = getHistory(chatId, userId);
    const chatContext = getChatMemoryContext(chatId);
    
    const messages = [
      { role: 'system', content: systemPrompt + chatContext }
    ];
    
    history.forEach(msg => {
      if (msg.role && msg.content) {
        messages.push({ role: msg.role, content: msg.content });
      }
    });
    
    const fullMessage = userMessage + additionalContext;
    messages.push({ role: 'user', content: fullMessage });
    
    const chatCompletion = await groq.chat.completions.create({
      messages: messages,
      model: 'llama-3.3-70b-versatile',
      temperature: 0.6,
      max_tokens: 2048,
    });
    
    let response = chatCompletion.choices[0]?.message?.content || '–í–∏–±–∞—á—Ç–µ, –Ω–µ –º–æ–∂—É –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è.';
    
    // –°—Ç–∏–ª—ñ–∑–∞—Ü—ñ—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è Telegram
    response = formatMessageForTelegram(response);
    
    await addToHistory(chatId, userId, 'user', userMessage);
    await addToHistory(chatId, userId, 'assistant', response);
    
    return response;
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ Groq API:', error);
    return '–í–∏–±–∞—á—Ç–µ, –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∞—à–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.';
  }
}

const menuKeyboard = {
  reply_markup: {
    inline_keyboard: [
      [
        { text: 'üìã –ö–æ–º—ñ—Å—ñ—è', callback_data: 'commission' },
        { text: 'üìÖ –î–∞—Ç–∏', callback_data: 'dates' }
      ],
      [
        { text: 'üìö –ü—Ä–µ–¥–º–µ—Ç–∏', callback_data: 'subjects' },
        { text: 'üïê –†–æ–∑–∫–ª–∞–¥', callback_data: 'schedule' }
      ],
      [
        { text: 'üí∞ –°—Ç–∏–ø–µ–Ω–¥—ñ—è', callback_data: 'studentship' },
        { text: 'üìä –û—Ü—ñ–Ω—é–≤–∞–Ω–Ω—è', callback_data: 'rating' }
      ]
    ]
  }
};

bot.on('new_chat_members', (msg) => {
  const chatId = msg.chat.id;
  const messageId = msg.message_id;
  bot.sendMessage(chatId, '–ë–æ—Ç', {reply_to_message_id: messageId});
});

bot.on('message', async (msg) => {
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–º–∞–Ω–¥—É –æ—á–∏—â–µ–Ω–Ω—è –ø–∞–º'—è—Ç—ñ
  if (msg.text === '/clear_memory') {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    try {
      clearUserMemory(chatId, userId);
      bot.sendMessage(chatId, '*–ü–∞–º\'—è—Ç—å –æ—á–∏—â–µ–Ω–æ!* üßπ\n\n–í–∞—à–∞ —ñ—Å—Ç–æ—Ä—ñ—è —Ä–æ–∑–º–æ–≤–∏ –±—É–ª–∞ –≤–∏–¥–∞–ª–µ–Ω–∞. –¢–µ–ø–µ—Ä —è –ø–æ—á–Ω—É –Ω–æ–≤—É —Ä–æ–∑–º–æ–≤—É –∑ —á–∏—Å—Ç–æ–≥–æ –∞—Ä–∫—É—à–∞.', 
        { parse_mode: 'Markdown' });
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –ø–∞–º\'—è—Ç—ñ:', error);
      bot.sendMessage(chatId, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ –ø–∞–º\'—è—Ç—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
    }
    return;
  }
  
  // –î–æ–¥–∞—î–º–æ –≤—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ –ø–∞–º'—è—Ç—ñ —á–∞—Ç—É
  if (msg.text && msg.from) {
    const authorName = msg.from.first_name || msg.from.username || 'user';
    await addToChatMemory(msg.chat.id, msg.text, authorName);
  }
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –∑–≥–∞–¥–∫–∞ –±–æ—Ç–∞ (@ois2025_bot)
  if (msg.text && msg.text.includes('@ois2025_bot')) {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    // –í–∏–¥–∞–ª—è—î–º–æ –∑–≥–∞–¥–∫—É –±–æ—Ç–∞ –∑ —Ç–µ–∫—Å—Ç—É
    const userPrompt = msg.text.replace(/@ois2025_bot\s*/g, '').trim();
    
    if (userPrompt) {
      const response = await getGroqResponse(userPrompt, chatId, userId);
      await addToChatMemory(chatId, response, 'bot');
      
      // –°–ø—Ä–æ–±—É—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑ Markdown, —è–∫—â–æ –Ω–µ –≤–∏–π–¥–µ - –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
      try {
        await bot.sendMessage(chatId, response, {
          reply_to_message_id: msg.message_id,
          parse_mode: 'Markdown'
        });
      } catch (markdownError) {
        console.error('–ü–æ–º–∏–ª–∫–∞ Markdown, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è:', markdownError.message);
        const plainText = response.replace(/[*_`~]/g, '').replace(/```[\s\S]*?```/g, '');
        await bot.sendMessage(chatId, plainText, {
          reply_to_message_id: msg.message_id
        });
      }
    }
    return;
  }
  
  if (msg.reply_to_message && msg.reply_to_message.from.is_bot) {
    const originalText = msg.reply_to_message.text;
    const replyText = msg.text;
    const chatId = msg.chat.id;
    
    if (originalText === '–ë–æ—Ç' && replyText === '–ù–µ –±–æ—Ç') {
      bot.sendMessage(chatId, '–¶–µ —Ç–∞–∫ –Ω–µ –ø—Ä–∞—Ü—é—î', {reply_to_message_id: msg.message_id});
    } else {
      const response = await getGroqResponse(replyText, chatId, msg.from.id);
      await addToChatMemory(chatId, response, 'bot');
      
      // –°–ø—Ä–æ–±—É—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑ Markdown, —è–∫—â–æ –Ω–µ –≤–∏–π–¥–µ - –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
      try {
        await bot.sendMessage(chatId, response, {
          reply_to_message_id: msg.message_id,
          parse_mode: 'Markdown'
        });
      } catch (markdownError) {
        console.error('–ü–æ–º–∏–ª–∫–∞ Markdown, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è:', markdownError.message);
        // –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ Markdown —Å–∏–º–≤–æ–ª–∏ —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —è–∫ –ø—Ä–æ—Å—Ç–∏–π —Ç–µ–∫—Å—Ç
        const plainText = response.replace(/[*_`~]/g, '').replace(/```[\s\S]*?```/g, '');
        await bot.sendMessage(chatId, plainText, {
          reply_to_message_id: msg.message_id
        });
      }
    }
  }
});

bot.onText(/\/menu/, (msg) => {
  const chatId = msg.chat.id;
    bot.sendMessage(chatId, '–ë—ñ–ª—å—à–µ –∫–æ—Ä–∏—Å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó —Ç—É—Ç: https://t.me/EhPhBekPivEwN2Uy \n–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª:', menuKeyboard);
});

bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, '–í—ñ—Ç–∞—é! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /menu –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.');
});


bot.onText(/\/broadcast ([\s\S]+)/, (msg, match) => {
  const chatId = msg.chat.id;
  
  if (chatId.toString() !== ADMIN_ID) {
    bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ–∑–≤–æ–ª—É –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.');
    return;
  }
  
  const message = match[1];
  
  bot.sendMessage(TARGET_CHAT, message)
    .then(() => {
      bot.sendMessage(chatId, '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª OIS_2025 ‚úÖ');
    })
    .catch((error) => {
      console.error('–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª:', error);
      bot.sendMessage(chatId, '–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚ùå');
    });
});

bot.on('callback_query', (callbackQuery) => {
  const message = callbackQuery.message;
  const data = callbackQuery.data;
  const chatId = message.chat.id;

  if (data === 'back_to_menu') {
    bot.editMessageText('–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª:', {
      chat_id: chatId,
      message_id: message.message_id,
      reply_markup: menuKeyboard.reply_markup
    });
    
    bot.answerCallbackQuery(callbackQuery.id);
    return;
  }

  let messageContent = '';
  let fileName = '';

  switch (data) {
    case 'commission':
      fileName = 'commission.txt';
      break;
    case 'dates':
      fileName = 'dates.txt';
      break;
    case 'subjects':
      fileName = 'subjects.txt';
      break;
    case 'schedule':
      fileName = 'schedule.txt';
      break;
    case 'studentship':
      fileName = 'studentship.txt';
      break;
    case 'rating':
      fileName = 'rating.txt';
      break;
    default:
      bot.answerCallbackQuery(callbackQuery.id, '–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞');
      return;
  }

  messageContent = readMessageFile(fileName);
  
  bot.editMessageText(messageContent, {
    chat_id: chatId,
    message_id: message.message_id,
    reply_markup: {
      inline_keyboard: [[{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é', callback_data: 'back_to_menu' }]]
    }
  });

  bot.answerCallbackQuery(callbackQuery.id);
});

console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —ñ –æ—á—ñ–∫—É—î –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...');