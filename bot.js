require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const path = require('path');
const Groq = require('groq-sdk');

const token = process.env.BOT_TOKEN;
const bot = new TelegramBot(token, {polling: true});

const ADMIN_ID = process.env.ADMIN_ID;
const TARGET_CHAT = process.env.TARGET_CHAT;

const groq = new Groq(process.env.GROQ_API_KEY);

const conversationHistory = new Map();

function readMessageFile(fileName) {
  try {
    const filePath = path.join(__dirname, 'messages', fileName);
    return fs.readFileSync(filePath, 'utf8');
  } catch (error) {
    console.error(`–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É ${fileName}:`, error);
    return '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è';
  }
}

function readSystemPrompt() {
  try {
    const filePath = path.join(__dirname, 'system_prompt.txt');
    return fs.readFileSync(filePath, 'utf8');
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç—É:', error);
    return '–¢–∏ –∫–æ—Ä–∏—Å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫-–±–æ—Ç –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –û–Ü–° 2025.';
  }
}

function getConversationKey(chatId, userId) {
  return `${chatId}_${userId}`;
}

function addToHistory(chatId, userId, role, content) {
  const key = getConversationKey(chatId, userId);
  if (!conversationHistory.has(key)) {
    conversationHistory.set(key, []);
  }
  
  const history = conversationHistory.get(key);
  history.push({ role, content, timestamp: Date.now() });
  
  if (history.length > 20) {
    history.splice(0, history.length - 20);
  }
  
  conversationHistory.set(key, history);
}

function getHistory(chatId, userId) {
  const key = getConversationKey(chatId, userId);
  return conversationHistory.get(key) || [];
}

async function getGroqResponse(userMessage, chatId, userId) {
  try {
    const systemPrompt = readSystemPrompt();
    const history = getHistory(chatId, userId);
    
    const messages = [
      { role: 'system', content: systemPrompt }
    ];
    
    history.forEach(msg => {
      if (msg.role && msg.content) {
        messages.push({ role: msg.role, content: msg.content });
      }
    });
    
    messages.push({ role: 'user', content: userMessage });
    
    const chatCompletion = await groq.chat.completions.create({
      messages: messages,
      model: 'llama3-8b-8192',
      temperature: 0.7,
      max_tokens: 1000
    });
    
    const response = chatCompletion.choices[0]?.message?.content || '–í–∏–±–∞—á—Ç–µ, –Ω–µ –º–æ–∂—É –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è.';
    
    addToHistory(chatId, userId, 'user', userMessage);
    addToHistory(chatId, userId, 'assistant', response);
    
    return response;
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ Groq API:', error);
    return '–í–∏–±–∞—á—Ç–µ, –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∞—à–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.';
  }
}

const menuKeyboard = {
  reply_markup: {
    inline_keyboard: [
      [
        { text: 'üìã –ö–æ–º—ñ—Å—ñ—è', callback_data: 'commission' },
        { text: 'üìÖ –î–∞—Ç–∏', callback_data: 'dates' }
      ],
      [
        { text: 'üìö –ü—Ä–µ–¥–º–µ—Ç–∏', callback_data: 'subjects' },
        { text: 'üïê –†–æ–∑–∫–ª–∞–¥', callback_data: 'schedule' }
      ],
      [
        { text: 'üí∞ –°—Ç–∏–ø–µ–Ω–¥—ñ—è', callback_data: 'studentship' },
        { text: 'üìä –û—Ü—ñ–Ω—é–≤–∞–Ω–Ω—è', callback_data: 'rating' }
      ]
    ]
  }
};

bot.on('new_chat_members', (msg) => {
  const chatId = msg.chat.id;
  const messageId = msg.message_id;
  bot.sendMessage(chatId, '–ë–æ—Ç', {reply_to_message_id: messageId});
});

bot.on('message', async (msg) => {
  if (msg.reply_to_message && msg.reply_to_message.from.is_bot) {
    const originalText = msg.reply_to_message.text;
    const replyText = msg.text;
    const chatId = msg.chat.id;
    
    if (originalText === '–ë–æ—Ç' && replyText) {
      bot.sendMessage(chatId, '–°–∞–º –±–æ—Ç', {reply_to_message_id: msg.message_id});
    } else if ((originalText === '–°–∞–º –±–æ—Ç' || originalText === '–ë–æ—Ç') && replyText === '–ù–µ –±–æ—Ç') {
      bot.sendMessage(chatId, '–¶–µ —Ç–∞–∫ –Ω–µ –ø—Ä–∞—Ü—é—î', {reply_to_message_id: msg.message_id});
    } else {
      const response = await getGroqResponse(replyText, chatId, msg.from.id);
      bot.sendMessage(chatId, response, {reply_to_message_id: msg.message_id});
    }
  }
});

bot.onText(/\/menu/, (msg) => {
  const chatId = msg.chat.id;
    bot.sendMessage(chatId, '–ë—ñ–ª—å—à–µ –∫–æ—Ä–∏—Å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó —Ç—É—Ç: https://t.me/EhPhBekPivEwN2Uy \n–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª:', menuKeyboard);
});

bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, '–í—ñ—Ç–∞—é! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /menu –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.');
});

bot.onText(/\/broadcast (.+)/, (msg, match) => {
  const chatId = msg.chat.id;
  
  if (chatId.toString() !== ADMIN_ID) {
    bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ–∑–≤–æ–ª—É –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.');
    return;
  }
  
  const message = match[1];
  
  bot.sendMessage(TARGET_CHAT, message)
    .then(() => {
      bot.sendMessage(chatId, '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª OIS_2025 ‚úÖ');
    })
    .catch((error) => {
      console.error('–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª:', error);
      bot.sendMessage(chatId, '–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚ùå');
    });
});

bot.on('callback_query', (callbackQuery) => {
  const message = callbackQuery.message;
  const data = callbackQuery.data;
  const chatId = message.chat.id;

  if (data === 'back_to_menu') {
    bot.editMessageText('–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª:', {
      chat_id: chatId,
      message_id: message.message_id,
      reply_markup: menuKeyboard.reply_markup
    });
    
    bot.answerCallbackQuery(callbackQuery.id);
    return;
  }

  let messageContent = '';
  let fileName = '';

  switch (data) {
    case 'commission':
      fileName = 'commission.txt';
      break;
    case 'dates':
      fileName = 'dates.txt';
      break;
    case 'subjects':
      fileName = 'subjects.txt';
      break;
    case 'schedule':
      fileName = 'schedule.txt';
      break;
    case 'studentship':
      fileName = 'studentship.txt';
      break;
    case 'rating':
      fileName = 'rating.txt';
      break;
    default:
      bot.answerCallbackQuery(callbackQuery.id, '–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞');
      return;
  }

  messageContent = readMessageFile(fileName);
  
  bot.editMessageText(messageContent, {
    chat_id: chatId,
    message_id: message.message_id,
    reply_markup: {
      inline_keyboard: [[{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é', callback_data: 'back_to_menu' }]]
    }
  });

  bot.answerCallbackQuery(callbackQuery.id);
});

console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —ñ –æ—á—ñ–∫—É—î –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...');